import chisel3._
import chisel3.util._
import chisel3.iotesters
import chisel3.iotesters.PeekPokeTester
import java.util


// sbt "test:runMain CPUTester"

object Programs{
  val program1 = Array(
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W)
  )


  val programAddi = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b01000000011000010000000000001111".U(32.W)
  )
  val programAdd = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00100000010000000000000000000010".U(32.W),
    "b01000100011000100000100000000000".U(32.W)
  )
  val programSub = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00100000010000000000000000000010".U(32.W),
    "b01001000011000010001000000000000".U(32.W)
  )
  val programMult = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00100000010000000000000000000010".U(32.W),
    "b10000000011000010001000000000000".U(32.W)
  )
  val programJr = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00010000000000000000000000000011".U(32.W),
    "b01000000001000010000000000000110".U(32.W),
    "b01000000001000010000000000000110".U(32.W)
  )
  val programJeq = Array(
    "b00100000001000000000000000000001".U(32.W), // LI 1 i R1
    "b01000000001000010000000000000001".U(32.W), // ADDI 1 til R1
    "b00100000010000000000000000000010".U(32.W), // LI 2 i R2
    "b00010100001000100000000000000001".U(32.W)  // JE R2 R1 1

  )
  val programJlt = Array(
    "b00100000001000000000000000000001".U(32.W),
    "b00100000010000000000000000000011".U(32.W),
    "b00011000001000100000000000100000".U(32.W)
  )

  val programSd = Array(
    "b00100000001000000000000000000001".U(32.W),
    "b00100000010000000000000000000011".U(32.W),
    "b00100100001000100000000000000000".U(32.W)
  )

  val programLd = Array(
    "b00100000001000000000000000000001".U(32.W),
    "b00100000010000000000000000000011".U(32.W),
    "b00100100001000100000000000000000".U(32.W),
    "b00101000001000100000000000000000".U(32.W),
    "b00101000001000110000000000000000".U(32.W),
  )

  val constOuterInner = Array(
    // CONSTANTS
    "b00100011011000000000000000000001".U(32.W), // 0. LI R27 1
    "b00100011100000000000000011111111".U(32.W), // 1. LI R28 255
    "b00100011101000000000000000010100".U(32.W), // 2. LI R29 20
    "b00100011110000000000000000000000".U(32.W), // 3. LI R30 0
    "b00100011111000000000000000010011".U(32.W), // 4. LI R31 19

    // OUTER FOR LOOP INIT
    "b00100000000000000000000000000000".U(32.W), // 5. LI R0 0
    // OUTER CHECK.
    "b01001000001111010000000000000000".U(32.W), // 6. SUB R1 R29 R0
    "b00010100001110110000000000001111".U(32.W), // 7. JEQ R1 R27 -> 15

      // INNER FOR LOOP INIT
      "b00100000010000000000000000000000".U(32.W), // 8. LI R2 0
      // INNER CHECK.
      "b01001000011111010001000000000000".U(32.W), // 9. SUB R3 R29 R2
      "b00010100011110110000000000001101".U(32.W), // 10. JEQ R3 R27 -> 13







      // INCREMENT AND REPEAT INNER FOR LOOP.
      "b01000000010000100000000000000001".U(32.W), // 11. ADDI R2 R2 1
      "b00010000000000000000000000001001".U(32.W), // 12. JR -> 9
      // END INNER FOR LOOP


    // INCREMENT AND REPEAT OUTER FOR LOOP.
    "b01000000000000000000000000000001".U(32.W), // 13. ADDI R0 R0 1
    "b00010000000000000000000000000110".U(32.W), // 14. JR -> 6
    // END OUTER FOR LOOP


    // FULL END
    "b00010000000000001111111100011111".U(32.W)  // 15. JR -> VÆK
  )
  val constOuterInnerTEST = Array(
    // CONSTANTS
    "b00100011011000000000000000000001".U(32.W), // 0. LI R27 1
    "b00100011100000000000000011111111".U(32.W), // 1. LI R28 255
    "b00100011101000000000000000010100".U(32.W), // 2. LI R29 20
    "b00100011110000000000000000000000".U(32.W), // 3. LI R30 0
    "b00100011111000000000000000010011".U(32.W), // 4. LI R31 19

    // OUTER FOR LOOP INIT
    "b00100000000000000000000000000000".U(32.W), // 5. LI R0 0
    // OUTER CHECK.
    "b01001000001111010000000000000000".U(32.W), // 6. SUB R1 R29 R0
    "b00010100001111100000000000110001".U(32.W), // 7. JEQ R1 R30 -> 49 -------

    // INNER FOR LOOP INIT
    "b00100000010000000000000000000000".U(32.W), // 8. LI R2 0
    // INNER CHECK.
    "b01001000011111010001000000000000".U(32.W), // 9. SUB R3 R29 R2
    "b00010100011111100000000000101111".U(32.W), // 10. JEQ R3 R30 -> 47 -------

    // IFS. SET PIXEL BLACK
    "b00010100000111100000000000010000".U(32.W), // 11. JEQ R0 R30 -> 16
    "b00010100000111110000000000010000".U(32.W), // 12. JEQ R0 R31 -> 16
    "b00010100010111100000000000010000".U(32.W), // 13. JEQ R2 R30 -> 16
    "b00010100010111110000000000010000".U(32.W), // 14. JEQ R2 R31 -> 16


    // SKIP SET PIXEL BLACK IF NO IF IS HIT.
    "b00010000000000000000000000010101".U(32.W), // 15. JR -> 21

    // SET PIXEL BLACK
    "b01000000101000100000000110010000".U(32.W), // 16. ADDI R5 R2 400
    "b10000000110000001110100000000000".U(32.W), // 17. MULT R6 R0
    "b01000100111001100010100000000000".U(32.W), // 18. ADD R7 R6 R5
    "b00100111110001110000000000000000".U(32.W), // 19. SD R30 R7
    "b00010000000000000000000000101101".U(32.W), // 20. JR - slut inner loop = 45 --------
    // SET PIXEL BLACK END.

    // IF IN IMAGE IS BLACK SET BLACK.
    "b10000000110000001110100000000000".U(32.W), // 21. MULT R6 R0 R29
    "b01000100111001100001000000000000".U(32.W), // 22. ADD R7 R6 R2
    "b00101001000001110000000000000000".U(32.W), // 23. LD R8 R7

    // IF IN IMAGE IS BLACK SET OUT BLACK.
    "b00010111110010000000000000010000".U(32.W), // 24. JEQ R8 R30 -> 16

    // IF IN IMAGE IS NOT BLACK DO
    /*"b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),
    "b00100001000000000000000000000000".U(32.W),*/



    "b00010100010111110000000000011101".U(32.W), // 25. JEQ R2 R31 -> A=29 -------
    "b01000001000001110000000000000001".U(32.W), // 26. ADDI R8 R7 1
    "b00101001001010000000000000000000".U(32.W), // 27. LD R9 R8
    "b00010101001111100000000000010000".U(32.W), // 28. JEQ R9 R30 -> 16
    // A.

    "b00010100010111100000000000100001".U(32.W), // 29. JEQ R2 R30 -> B=33 -------
    "b01001001000001111101100000000000".U(32.W), // 30. SUB R8 R7 R27
    "b00101001001010000000000000000000".U(32.W), // 31. LD R9 R8
    "b00010101001111100000000000010000".U(32.W), // 32. JEQ R9 R30 -> 16
    // B

    "b00010100000111110000000000100101".U(32.W), // 33. JEQ R0 R31 -> C=37 --------
    "b01000001000001110000000000010100".U(32.W), // 34. ADDI R8 R7 20
    "b00101001001010000000000000000000".U(32.W), // 35. LD R9 R8
    "b00010101001111100000000000010000".U(32.W), // 36. JEQ R9 R30 -> 16
    // C.

    "b00010100000111100000000000101001".U(32.W), // 37. JEQ R0 R30 -> D=41 --------
    "b01001001000001111110100000000000".U(32.W), // 38. SUB R8 R7 R29
    "b00101001001010000000000000000000".U(32.W), // 39. LD R9 R8
    "b00010101001111100000000000010000".U(32.W), // 40. JEQ R9 R30 -> 16
    // D




    // IF NO EROSION. SET WHITE
    "b01000000101000100000000110010000".U(32.W), // 41. ADDI R5 R2 400
    "b10000000110000001110100000000000".U(32.W), // 42. MULT R6 R0 R29
    "b01000100111001100010100000000000".U(32.W), // 43. ADD R7 R6 R5
    "b00100111100001110000000000000000".U(32.W), // 44. SD R28 R7





    // INCREMENT AND REPEAT INNER FOR LOOP.
    "b01000000010000100000000000000001".U(32.W), // 45. ADDI R2 R2 1
    "b00010000000000000000000000001001".U(32.W), // 46. JR -> 9
    // END INNER FOR LOOP


    // INCREMENT AND REPEAT OUTER FOR LOOP.
    "b01000000000000000000000000000001".U(32.W), // 47. ADDI R0 R0 1
    "b00010000000000000000000000000110".U(32.W), // 48. JR -> 6
    // END OUTER FOR LOOP


    // FULL END
    "b00010000000000001111111100011111".U(32.W)  // 49. JR -> VÆK
  )
}