import chisel3._
import chisel3.util._
import chisel3.iotesters
import chisel3.iotesters.PeekPokeTester
import java.util

object Programs{
  val program1 = Array(
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W)
  )


  val programAddi = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b01000000011000010000000000001111".U(32.W)
  )
  val programAdd = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00100000010000000000000000000010".U(32.W),
    "b01000100011000100000100000000000".U(32.W)
  )
  val programSub = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00100000010000000000000000000010".U(32.W),
    "b01001000011000010001000000000000".U(32.W)
  )
  val programMult = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00100000010000000000000000000010".U(32.W),
    "b10000000011000010001000000000000".U(32.W)
  )
  val programJr = Array(
    "b00100000001000000000000000000110".U(32.W),
    "b00010000000000000000000000000011".U(32.W),
    "b01000000001000010000000000000110".U(32.W),
    "b01000000001000010000000000000110".U(32.W)
  )
  val programJeq = Array(
    "b00100000001000000000000000000001".U(32.W), // LI 1 i R1
    "b01000000001000010000000000000001".U(32.W), // ADDI 1 til R1
    "b00100000010000000000000000000010".U(32.W), // LI 2 i R2
    "b00010100001000100000000000000001".U(32.W)  // JE R2 R1 1

  )
  val programJlt = Array(
    "b00100000001000000000000000000001".U(32.W),
    "b00100000010000000000000000000011".U(32.W),
    "b00011000001000100000000000100000".U(32.W)
  )

  val programSd = Array(
    "b00100000001000000000000000000001".U(32.W),
    "b00100000010000000000000000000011".U(32.W),
    "b00100100001000100000000000000000".U(32.W)
  )

  val programLd = Array(
    "b00100000001000000000000000000001".U(32.W),
    "b00100000010000000000000000000011".U(32.W),
    "b00100100001000100000000000000000".U(32.W),
    "b00101000001000100000000000000000".U(32.W),
    "b00101000001000110000000000000000".U(32.W),
  )

  val constOuterInner = Array(
    // CONSTANTS
    "b00100011011000000000000000000001".U(32.W), // 0. LI R27 1
    "b00100011100000000000000011111111".U(32.W), // 1. LI R28 255
    "b00100011101000000000000000010100".U(32.W), // 2. LI R29 20
    "b00100011110000000000000000000000".U(32.W), // 3. LI R30 0
    "b00100011111000000000000000010011".U(32.W), // 4. LI R31 19

    // OUTER FOR LOOP INIT
    "b00100000000000000000000000000000".U(32.W), // 5. LI R0 0
    // OUTER CHECK.
    "b01001000001111010000000000000000".U(32.W), // 6. SUB R1 R29 R0
    "b00010100001110110000000000001111".U(32.W), // 7. JEQ R1 R27 -> 15

      // INNER FOR LOOP INIT
      "b00100000010000000000000000000000".U(32.W), // 8. LI R2 0
      // INNER CHECK.
      "b01001000011111010001000000000000".U(32.W), // 9. SUB R3 R29 R2
      "b00010100011110110000000000001101".U(32.W), // 10. JEQ R3 R27 -> 13







      // INCREMENT AND REPEAT INNER FOR LOOP.
      "b01000000010000100000000000000001".U(32.W), // 11. ADDI R2 R2 1
      "b00010000000000000000000000001001".U(32.W), // 12. JR -> 9
      // END INNER FOR LOOP


    // INCREMENT AND REPEAT OUTER FOR LOOP.
    "b01000000000000000000000000000001".U(32.W), // 13. ADDI R0 R0 1
    "b00010000000000000000000000000110".U(32.W), // 14. JR -> 6
    // END OUTER FOR LOOP


    // FULL END
    "b00010000000000001111111100011111".U(32.W)  // 15. JR -> VÆK
  )
  val constOuterInnerTEST = Array(
    // CONSTANTS
    "b00100011011000000000000000000001".U(32.W), // 0. LI R27 1
    "b00100011100000000000000011111111".U(32.W), // 1. LI R28 255
    "b00100011101000000000000000010100".U(32.W), // 2. LI R29 20
    "b00100011110000000000000000000000".U(32.W), // 3. LI R30 0
    "b00100011111000000000000000010011".U(32.W), // 4. LI R31 19

    // OUTER FOR LOOP INIT
    "b00100000000000000000000000000000".U(32.W), // 5. LI R0 0
    // OUTER CHECK.
    "b01001000001111010000000000000000".U(32.W), // 6. SUB R1 R29 R0
    "b00010100001110110000000000001111".U(32.W), // 7. JEQ R1 R27 -> 15

    // INNER FOR LOOP INIT
    "b00100000010000000000000000000000".U(32.W), // 8. LI R2 0
    // INNER CHECK.
    "b01001000011111010001000000000000".U(32.W), // 9. SUB R3 R29 R2
    "b00010100011110110000000000001101".U(32.W), // 10. JEQ R3 R27 -> 13







    // INCREMENT AND REPEAT INNER FOR LOOP.
    "b01000000010000100000000000000001".U(32.W), // 11. ADDI R2 R2 1
    "b00010000000000000000000000001001".U(32.W), // 12. JR -> 9
    // END INNER FOR LOOP


    // INCREMENT AND REPEAT OUTER FOR LOOP.
    "b01000000000000000000000000000001".U(32.W), // 13. ADDI R0 R0 1
    "b00010000000000000000000000000110".U(32.W), // 14. JR -> 6
    // END OUTER FOR LOOP


    // FULL END
    "b00010000000000001111111100011111".U(32.W)  // 15. JR -> VÆK
  )
}